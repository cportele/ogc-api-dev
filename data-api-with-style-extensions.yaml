openapi: 3.0.1
# Revisions:
# 2019-05-09 initial version
# 2019-05-11 add PATCH semantics
# 2019-07-12 update OGC API Features to 1.0.0-draft.2 and removed the tile resource
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/cportele/opf-features-api/1.0.0
info:
  title: |-
    Open Portrayal Framework Features API (DRAFT)
  description: |-
    This is a draft of the OGC Testbed-15 Features API extensions 
    to support styles in the Open Portrayal Framework task.
    
    The extensions are the following.
    * The feature collection metadata (path `/collections/{collectionId}`) 
    has been extended by the set of applicable styles (member `styles`, same
    value as in `/styles` in the Style API) and a default style 
    (member `defaultStyle`, the style id).
    * The PATCH operation on the feature collection metadata 
    (path `/collections/{collectionId}`) has been added. Only `styles` and
    `defaultStyle` may be updated.
    * The queryables resource (path `/collections/{collectionId}/queryables`)
    has been added to support clients like visual style editors to construct 
    expressions for selection criteria in queries on features in the collection.

    For more background information see [the Vector Tiles Pilot Extension Engineering 
    Report](http://docs.opengeospatial.org/per/18-101.html#StylesAPI).

    This document is also available in [GitHub](https://github.com/cportele/t15-opf/blob/master/data-api-with-style-extensions.yaml).

  version: "1.0.0"
  contact:
    name: Clemens Portele
    email: portele@interactive-instruments.de
  license:
    name: OGC License
    url: 'https://raw.githubusercontent.com/opengeospatial/WFS_FES/master/LICENSE'
tags:
  - name: Capabilities
    description: |-
      essential characteristics of this API
  - name: Features
    description: |-
      access to data (features)
paths:
  '/':
    get:
      tags:
        - Capabilities
      summary: landing page
      description: |-
        The landing page provides links to the API definition, the conformance
        statements and to the feature collections in this dataset.
      operationId: getLandingPage
      parameters:
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/LandingPage'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
  '/conformance':
    get:
      summary: information about specifications that this API conforms to
      description: |-
        A list of all conformance classes specified in a standard that the 
        server conforms to.
      operationId: getConformanceDeclaration
      parameters:
        - $ref: '#/components/parameters/f'
      tags:
        - Capabilities
      responses:
        '200':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ConformanceDeclaration'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
  '/collections':
    get:
      tags:
        - Capabilities
      summary: the feature collections in the dataset
      operationId: getCollections
      parameters:
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/Collections'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
  '/collections/{collectionId}':
    get:
      tags:
        - Capabilities
      summary: describe a feature collection
      operationId: describeCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: |-
            Information about the collection including style information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
            text/html:
              schema:
                type: string
        '404':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/NotFound'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
    patch:
      tags:
        - Capabilities
      summary: |-
        update parts of the style metadata
      description: |-
        Update selected elements of the metadata for 
        the collection with the id `collectionId`.
        
        The only members that may be updated at this 
        time are `styles` and `defaultStyle`.
        
        The PATCH semantics in this operation are defined by 
        RFC 7396 (JSON Merge Patch). From the specification:
        
        _"A JSON merge patch document describes changes to be 
        made to a target JSON document using a syntax that 
        closely mimics the document being modified. Recipients
        of a merge patch document determine the exact set of 
        changes being requested by comparing the content of 
        the provided patch against the current content of the 
        target document. If the provided merge patch contains 
        members that do not appear within the target, those 
        members are added. If the target does contain the 
        member, the value is replaced. Null values in the 
        merge patch are given special meaning to indicate 
        the removal of existing values in the target."_
        
        Some examples:
        
        To add or update the default style, just send
        
        ```
        {
          "defaultStyle": "night"
        }
        ```
        
        To remove the default style, send 

        ```
        {
          "defaultStyle": null
        }
        ```
        
        For arrays the complete array needs to be sent. I.e., to
        update the list of styles, send the complete new array value.

        To remove all styles, send
        
        ```
        {
          "styles": null
        }
        ```
        
        This operation is only available to registered 
        users.
      operationId: patchCollectionMetadata
      security:
        - BasicAuth: []
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        description: |-
          The updated style information for the collection.
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/collection-patch'
      responses:
        '204':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/Updated'
        '400':
          description: |-
            Malformed patch document.
        '401':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/UnauthorizedAccess'
        '404':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/NotFound'
        '415':
          description: |-
            Unsupported patch document.
          headers:
            Accept-Patch:
              description: |-
                supported patch document media types
              schema:
                type: string
        '422':
          description: |-
            Unprocessable request. The patch document appears 
            to be valid, but the server is incapable of processing 
            the request.
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
  '/collections/{collectionId}/queryables':
    get:
      tags:
        - Capabilities
      summary: fetch the queryable properties of the feature collection
      description: |-
        This operation supports clients to construct expressions for 
        selection criteria in queries on features in the collection. 
        
        The response is an array with the queryable properties of 
        the feature collection. "Queryable" means that the property may
        be used in query expressions, for example, in a CQL query 
        expression or as part of a selection criteria in a SLD/SE or
        Mapbox styling rule.
        
        Often the list will be a subset of all available properties 
        in the features and be restricted to those properties that
        are, for example, indexed in the backend datastore to support
        performant queries.
        
        For each queryable property the following information is provided.
        * **id** (required) - the property name for use in expressions 
        * **type** (required) - the data type of the property, one of
          * string
          * uri
          * enum
          * number
          * integer
          * date
          * dateTime
          * boolean
        * **description** (optional) - a description of the property
        * **required** (optional) - indicator whether the property is 
        always present in features
        * **mediaTypes** (optional) - in general, the representation of 
        the queryables is meant to be independent of the feature encoding;
        however, this is not always the case; for example, length restrictions 
        or namespace prefixes may result in different property identifiers 
        for the same property; to support this, the definition of a queryable
        may be restricted to one or more feature encodings (media types).
        * **pattern** (optional, only for "string" and "uri") - a regular 
        expression to validate the values of the property
        * **values** (required, only for "enum") - an array of valid values 
        of the property
        * **range** (optional, only for "number", "integer", "date" and 
        "dateTime") - the range of valid values expressed as an array with
        two items; open ranges can be expressed using `null` for the minimum
        or maximum value
        
        Note that this is separate from providing a complete schema for 
        the features in the collection. A schema provides a complete syntactic 
        definition of a specific feature encoding, typically for validation 
        purposes. Schema languages like XML Schema or JSON Schema are 
        much richer and support more complex syntactic rules, but are also 
        more complex to parse.
        
      operationId: getQueryables
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: |-
            The list of queryable properties for the features in the collection.
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/queryables'
            text/html:
              schema:
                type: string
        '404':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/NotFound'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
  '/collections/{collectionId}/items':
    get:
      tags:
        - Features
      summary: retrieve features of the feature collection
      operationId: getFeatures
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
        - $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/parameters/bbox'
        - $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/parameters/datetime'
        - name: f_code
          in: query
          description: Filter the collection by f_code
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/Features'
        '404':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/NotFound'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
  '/collections/{collectionId}/items/{featureId}':
    get:
      tags:
        - Features
      summary: fetch a feature
      operationId: getFeature
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/parameters/featureId'
        - $ref: '#/components/parameters/f'
        - $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/parameters/properties'
      responses:
        '200':
          description: |-
            A feature.
          content:
            application/geo+json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/schemas/featureGeoJSON'
            text/html:
              schema:
                type: string
        '404':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/NotFound'
        '500':
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/responses/ServerError'
components:
  schemas:
    collection:
      allOf:
      - $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/schemas/collection'      
      - type: object
        properties:
          styles:
            $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/schemas/style-set'
          defaultStyle:
            type: string
            description: |-
              the style id of a recommended default style to use for this collection
            example: 'topographic'
    collection-patch:
      type: object
      properties:
        styles:
          $ref: 'https://api.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0-draft.2#/components/schemas/style-set'
        defaultStyle:
          type: string
          nullable: true
          description: |-
            the style id of a recommended default style to use for this collection
          example: 'topographic'
    collectionList:
      type: string
      enum:
        - aeronauticcrv
        - aeronauticsrf
        - agriculturepnt
        - agriculturesrf
        - culturepnt
        - culturesrf
        - facilitypnt
        - facilitysrf
        - hydrographycrv
        - hydrographypnt
        - hydrographysrf
        - industrysrf
        - informationpnt
        - militarysrf
        - o2s_a
        - o2s_l
        - o2s_p
        - physiographycrv
        - recreationcrv
        - recreationpnt
        - recreationsrf
        - settlementpnt
        - settlementsrf
        - structurecrv
        - structurepnt
        - structuresrf
        - transportationgroundcrv
        - transportationgroundpnt
        - transportationgroundsrf
        - transportationwatercrv
        - utilityinfrastructurecrv
        - utilityinfrastructurepnt
        - vegetationsrf
  parameters:
    f:
      name: f
      in: query
      description: |-
        The format of the response. If no value is provided, the standard http
        rules apply, i.e., the accept header is used to determine the format.

        Pre-defined values are "json" and "html". The response to other 
        values is determined by the server.
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
          - json
          - html
      example: json
    collectionId:
      name: collectionId
      in: path
      description: |-
        local identifier of a collection
      required: true
      schema:
        $ref: '#/components/schemas/collectionList'